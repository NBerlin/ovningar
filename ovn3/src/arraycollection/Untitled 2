Lösningar övning 3

U 18)
Fall en klass implementerar ett interface måste det även implementera alla abstrakta metoder och liknande
från interfacet. Ett interface innehåller även bara publika abstracta metoder. Det här är en rätt shit förklaring
men så som jag förstod det är det typ som i labb 1 har man shape, så alla subklasser av shape som cirkel etc
som implementerar shape måste implementera shapes abstrakta funktioner som move. Så ett interface sätter typ
ett skelett antar jag, alltså grundläggande saker som de alla kommer ha gemensamt även fall de inte ser
likadana ut eller gör samma saker kommer de ha de här sakerna gemensamt och kunna göra dessa saker. Skriv 
till mig fall du inte fattar för som sagt rätt shit förklaring.

U 19)
Så det självklara är att de båda oftast innehåller abstrakta metoder men ett interface kan bara innehålla sånt
som abstrakta metoder medan en abstrakt klass kan även innehålla konstruktor och liknande. Man kan även
inte skapa objekt av varken abstrakta klasser eller konstruktorer.

u 20)
Gjort i Rectangle.java

b)
1 och 3 är korrekta för resizable är ett interface, och som jag skrev ovan kan man inte skapa objekt
från konstruktorer.

U 21)
fixat se Rectangle.java

b) try{
	r.downSize(n);
}
catch(illegalArgumentException e){
System.out.println(e.getMessage());}

U 22)
Fixat se ArrayCollection.java

U 23)
Inte gjort än

U 24)
Så skillnaden är att en Iterator är en samling objekt som har ett "current objekt" och man kan kolla fall den
har fler med .hasNext och gå vidare med .next. Något som är iterable är en samling element som kan skapa en
Iterator med en funktion.

U 25)
Iterator<Person> iterator = coll.Iterator();
while(itr.hasnext()){
	System.out.println(iterator.next);
}

b)
Detta kunde jag inte men det är en sådan for loop som oskar alltid använder och de ser ut så här
for(Person p : coll){
	System.out.println(p);
}
Så detta översätts ungefär till för varje Person p i coll{Gör detta}


U 26) 
Gjort se ArrayCollection.java

U 27) Problemet med detta skulle vara att det bara kan finnas en position i samlingen, så man hade som exempel
inte kunnat ha två iterators igång samtidigt för att jämföra två olika objekt.